// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"sync"

	ytfeed "github.com/umputun/feed-master/app/youtube/feed"
)

// ChannelServiceMock is a mock implementation of youtube.ChannelService.
//
// 	func TestSomethingThatUsesChannelService(t *testing.T) {
//
// 		// make and configure a mocked youtube.ChannelService
// 		mockedChannelService := &ChannelServiceMock{
// 			GetFunc: func(ctx context.Context, chanID string, feedType ytfeed.Type) ([]ytfeed.Entry, error) {
// 				panic("mock out the Get method")
// 			},
// 		}
//
// 		// use mockedChannelService in code that requires youtube.ChannelService
// 		// and then make assertions.
//
// 	}
type ChannelServiceMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, chanID string, feedType ytfeed.Type) ([]ytfeed.Entry, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ChanID is the chanID argument value.
			ChanID string
			// FeedType is the feedType argument value.
			FeedType ytfeed.Type
		}
	}
	lockGet sync.RWMutex
}

// Get calls GetFunc.
func (mock *ChannelServiceMock) Get(ctx context.Context, chanID string, feedType ytfeed.Type) ([]ytfeed.Entry, error) {
	if mock.GetFunc == nil {
		panic("ChannelServiceMock.GetFunc: method is nil but ChannelService.Get was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		ChanID   string
		FeedType ytfeed.Type
	}{
		Ctx:      ctx,
		ChanID:   chanID,
		FeedType: feedType,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(ctx, chanID, feedType)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedChannelService.GetCalls())
func (mock *ChannelServiceMock) GetCalls() []struct {
	Ctx      context.Context
	ChanID   string
	FeedType ytfeed.Type
} {
	var calls []struct {
		Ctx      context.Context
		ChanID   string
		FeedType ytfeed.Type
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}
