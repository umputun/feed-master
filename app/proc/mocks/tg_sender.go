// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"sync"

	tb "gopkg.in/tucnak/telebot.v2"
)

// TelegramSenderMock is a mock implementation of proc.TelegramSender.
//
// 	func TestSomethingThatUsesTelegramSender(t *testing.T) {
//
// 		// make and configure a mocked proc.TelegramSender
// 		mockedTelegramSender := &TelegramSenderMock{
// 			SendFunc: func(audio tb.Audio, bot *tb.Bot, recipient tb.Recipient, sendOptions *tb.SendOptions) (*tb.Message, error) {
// 				panic("mock out the Send method")
// 			},
// 		}
//
// 		// use mockedTelegramSender in code that requires proc.TelegramSender
// 		// and then make assertions.
//
// 	}
type TelegramSenderMock struct {
	// SendFunc mocks the Send method.
	SendFunc func(audio tb.Audio, bot *tb.Bot, recipient tb.Recipient, sendOptions *tb.SendOptions) (*tb.Message, error)

	// calls tracks calls to the methods.
	calls struct {
		// Send holds details about calls to the Send method.
		Send []struct {
			// Audio is the audio argument value.
			Audio tb.Audio
			// Bot is the bot argument value.
			Bot *tb.Bot
			// Recipient is the recipient argument value.
			Recipient tb.Recipient
			// SendOptions is the sendOptions argument value.
			SendOptions *tb.SendOptions
		}
	}
	lockSend sync.RWMutex
}

// Send calls SendFunc.
func (mock *TelegramSenderMock) Send(audio tb.Audio, bot *tb.Bot, recipient tb.Recipient, sendOptions *tb.SendOptions) (*tb.Message, error) {
	if mock.SendFunc == nil {
		panic("TelegramSenderMock.SendFunc: method is nil but TelegramSender.Send was just called")
	}
	callInfo := struct {
		Audio       tb.Audio
		Bot         *tb.Bot
		Recipient   tb.Recipient
		SendOptions *tb.SendOptions
	}{
		Audio:       audio,
		Bot:         bot,
		Recipient:   recipient,
		SendOptions: sendOptions,
	}
	mock.lockSend.Lock()
	mock.calls.Send = append(mock.calls.Send, callInfo)
	mock.lockSend.Unlock()
	return mock.SendFunc(audio, bot, recipient, sendOptions)
}

// SendCalls gets all the calls that were made to Send.
// Check the length with:
//     len(mockedTelegramSender.SendCalls())
func (mock *TelegramSenderMock) SendCalls() []struct {
	Audio       tb.Audio
	Bot         *tb.Bot
	Recipient   tb.Recipient
	SendOptions *tb.SendOptions
} {
	var calls []struct {
		Audio       tb.Audio
		Bot         *tb.Bot
		Recipient   tb.Recipient
		SendOptions *tb.SendOptions
	}
	mock.lockSend.RLock()
	calls = mock.calls.Send
	mock.lockSend.RUnlock()
	return calls
}
