// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"sync"

	"github.com/umputun/feed-master/app/feed"
)

// TwitterNotifMock is a mock implementation of proc.TwitterNotif.
//
// 	func TestSomethingThatUsesTwitterNotif(t *testing.T) {
//
// 		// make and configure a mocked proc.TwitterNotif
// 		mockedTwitterNotif := &TwitterNotifMock{
// 			SendFunc: func(item feed.Item) error {
// 				panic("mock out the Send method")
// 			},
// 		}
//
// 		// use mockedTwitterNotif in code that requires proc.TwitterNotif
// 		// and then make assertions.
//
// 	}
type TwitterNotifMock struct {
	// SendFunc mocks the Send method.
	SendFunc func(item feed.Item) error

	// calls tracks calls to the methods.
	calls struct {
		// Send holds details about calls to the Send method.
		Send []struct {
			// Item is the item argument value.
			Item feed.Item
		}
	}
	lockSend sync.RWMutex
}

// Send calls SendFunc.
func (mock *TwitterNotifMock) Send(item feed.Item) error {
	if mock.SendFunc == nil {
		panic("TwitterNotifMock.SendFunc: method is nil but TwitterNotif.Send was just called")
	}
	callInfo := struct {
		Item feed.Item
	}{
		Item: item,
	}
	mock.lockSend.Lock()
	mock.calls.Send = append(mock.calls.Send, callInfo)
	mock.lockSend.Unlock()
	return mock.SendFunc(item)
}

// SendCalls gets all the calls that were made to Send.
// Check the length with:
//     len(mockedTwitterNotif.SendCalls())
func (mock *TwitterNotifMock) SendCalls() []struct {
	Item feed.Item
} {
	var calls []struct {
		Item feed.Item
	}
	mock.lockSend.RLock()
	calls = mock.calls.Send
	mock.lockSend.RUnlock()
	return calls
}
