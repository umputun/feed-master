// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"sync"
)

// DurationServiceMock is a mock implementation of proc.DurationService.
//
// 	func TestSomethingThatUsesDurationService(t *testing.T) {
//
// 		// make and configure a mocked proc.DurationService
// 		mockedDurationService := &DurationServiceMock{
// 			FileFunc: func(fname string) int {
// 				panic("mock out the File method")
// 			},
// 		}
//
// 		// use mockedDurationService in code that requires proc.DurationService
// 		// and then make assertions.
//
// 	}
type DurationServiceMock struct {
	// FileFunc mocks the File method.
	FileFunc func(fname string) int

	// calls tracks calls to the methods.
	calls struct {
		// File holds details about calls to the File method.
		File []struct {
			// Fname is the fname argument value.
			Fname string
		}
	}
	lockFile sync.RWMutex
}

// File calls FileFunc.
func (mock *DurationServiceMock) File(fname string) int {
	if mock.FileFunc == nil {
		panic("DurationServiceMock.FileFunc: method is nil but DurationService.File was just called")
	}
	callInfo := struct {
		Fname string
	}{
		Fname: fname,
	}
	mock.lockFile.Lock()
	mock.calls.File = append(mock.calls.File, callInfo)
	mock.lockFile.Unlock()
	return mock.FileFunc(fname)
}

// FileCalls gets all the calls that were made to File.
// Check the length with:
//     len(mockedDurationService.FileCalls())
func (mock *DurationServiceMock) FileCalls() []struct {
	Fname string
} {
	var calls []struct {
		Fname string
	}
	mock.lockFile.RLock()
	calls = mock.calls.File
	mock.lockFile.RUnlock()
	return calls
}
