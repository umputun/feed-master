// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"sync"

	"github.com/umputun/feed-master/app/feed"
)

// TelegramNotifMock is a mock implementation of proc.TelegramNotif.
//
// 	func TestSomethingThatUsesTelegramNotif(t *testing.T) {
//
// 		// make and configure a mocked proc.TelegramNotif
// 		mockedTelegramNotif := &TelegramNotifMock{
// 			SendFunc: func(chanID string, item feed.Item) error {
// 				panic("mock out the Send method")
// 			},
// 		}
//
// 		// use mockedTelegramNotif in code that requires proc.TelegramNotif
// 		// and then make assertions.
//
// 	}
type TelegramNotifMock struct {
	// SendFunc mocks the Send method.
	SendFunc func(chanID string, item feed.Item) error

	// calls tracks calls to the methods.
	calls struct {
		// Send holds details about calls to the Send method.
		Send []struct {
			// ChanID is the chanID argument value.
			ChanID string
			// Item is the item argument value.
			Item feed.Item
		}
	}
	lockSend sync.RWMutex
}

// Send calls SendFunc.
func (mock *TelegramNotifMock) Send(chanID string, item feed.Item) error {
	if mock.SendFunc == nil {
		panic("TelegramNotifMock.SendFunc: method is nil but TelegramNotif.Send was just called")
	}
	callInfo := struct {
		ChanID string
		Item   feed.Item
	}{
		ChanID: chanID,
		Item:   item,
	}
	mock.lockSend.Lock()
	mock.calls.Send = append(mock.calls.Send, callInfo)
	mock.lockSend.Unlock()
	return mock.SendFunc(chanID, item)
}

// SendCalls gets all the calls that were made to Send.
// Check the length with:
//     len(mockedTelegramNotif.SendCalls())
func (mock *TelegramNotifMock) SendCalls() []struct {
	ChanID string
	Item   feed.Item
} {
	var calls []struct {
		ChanID string
		Item   feed.Item
	}
	mock.lockSend.RLock()
	calls = mock.calls.Send
	mock.lockSend.RUnlock()
	return calls
}
