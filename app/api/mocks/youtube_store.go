// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"sync"

	ytfeed "github.com/umputun/feed-master/app/youtube/feed"
)

// YoutubeStoreMock is a mock implementation of api.YoutubeStore.
//
//	func TestSomethingThatUsesYoutubeStore(t *testing.T) {
//
//		// make and configure a mocked api.YoutubeStore
//		mockedYoutubeStore := &YoutubeStoreMock{
//			LoadFunc: func(channelID string, maxItems int) ([]ytfeed.Entry, error) {
//				panic("mock out the Load method")
//			},
//		}
//
//		// use mockedYoutubeStore in code that requires api.YoutubeStore
//		// and then make assertions.
//
//	}
type YoutubeStoreMock struct {
	// LoadFunc mocks the Load method.
	LoadFunc func(channelID string, maxItems int) ([]ytfeed.Entry, error)

	// calls tracks calls to the methods.
	calls struct {
		// Load holds details about calls to the Load method.
		Load []struct {
			// ChannelID is the channelID argument value.
			ChannelID string
			// MaxItems is the maxItems argument value.
			MaxItems int
		}
	}
	lockLoad sync.RWMutex
}

// Load calls LoadFunc.
func (mock *YoutubeStoreMock) Load(channelID string, maxItems int) ([]ytfeed.Entry, error) {
	if mock.LoadFunc == nil {
		panic("YoutubeStoreMock.LoadFunc: method is nil but YoutubeStore.Load was just called")
	}
	callInfo := struct {
		ChannelID string
		MaxItems  int
	}{
		ChannelID: channelID,
		MaxItems:  maxItems,
	}
	mock.lockLoad.Lock()
	mock.calls.Load = append(mock.calls.Load, callInfo)
	mock.lockLoad.Unlock()
	return mock.LoadFunc(channelID, maxItems)
}

// LoadCalls gets all the calls that were made to Load.
// Check the length with:
//
//	len(mockedYoutubeStore.LoadCalls())
func (mock *YoutubeStoreMock) LoadCalls() []struct {
	ChannelID string
	MaxItems  int
} {
	var calls []struct {
		ChannelID string
		MaxItems  int
	}
	mock.lockLoad.RLock()
	calls = mock.calls.Load
	mock.lockLoad.RUnlock()
	return calls
}
